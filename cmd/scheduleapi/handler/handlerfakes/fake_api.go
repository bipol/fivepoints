// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/smartatransit/fivepoints/api/v1/schedule"
	"github.com/smartatransit/fivepoints/cmd/scheduleapi/handler"
)

type FakeAPI struct {
	GetScheduleStub        func(context.Context, *schedule.GetScheduleRequest) (*schedule.GetScheduleResponse, error)
	getScheduleMutex       sync.RWMutex
	getScheduleArgsForCall []struct {
		arg1 context.Context
		arg2 *schedule.GetScheduleRequest
	}
	getScheduleReturns struct {
		result1 *schedule.GetScheduleResponse
		result2 error
	}
	getScheduleReturnsOnCall map[int]struct {
		result1 *schedule.GetScheduleResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetSchedule(arg1 context.Context, arg2 *schedule.GetScheduleRequest) (*schedule.GetScheduleResponse, error) {
	fake.getScheduleMutex.Lock()
	ret, specificReturn := fake.getScheduleReturnsOnCall[len(fake.getScheduleArgsForCall)]
	fake.getScheduleArgsForCall = append(fake.getScheduleArgsForCall, struct {
		arg1 context.Context
		arg2 *schedule.GetScheduleRequest
	}{arg1, arg2})
	fake.recordInvocation("GetSchedule", []interface{}{arg1, arg2})
	fake.getScheduleMutex.Unlock()
	if fake.GetScheduleStub != nil {
		return fake.GetScheduleStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getScheduleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetScheduleCallCount() int {
	fake.getScheduleMutex.RLock()
	defer fake.getScheduleMutex.RUnlock()
	return len(fake.getScheduleArgsForCall)
}

func (fake *FakeAPI) GetScheduleCalls(stub func(context.Context, *schedule.GetScheduleRequest) (*schedule.GetScheduleResponse, error)) {
	fake.getScheduleMutex.Lock()
	defer fake.getScheduleMutex.Unlock()
	fake.GetScheduleStub = stub
}

func (fake *FakeAPI) GetScheduleArgsForCall(i int) (context.Context, *schedule.GetScheduleRequest) {
	fake.getScheduleMutex.RLock()
	defer fake.getScheduleMutex.RUnlock()
	argsForCall := fake.getScheduleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetScheduleReturns(result1 *schedule.GetScheduleResponse, result2 error) {
	fake.getScheduleMutex.Lock()
	defer fake.getScheduleMutex.Unlock()
	fake.GetScheduleStub = nil
	fake.getScheduleReturns = struct {
		result1 *schedule.GetScheduleResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetScheduleReturnsOnCall(i int, result1 *schedule.GetScheduleResponse, result2 error) {
	fake.getScheduleMutex.Lock()
	defer fake.getScheduleMutex.Unlock()
	fake.GetScheduleStub = nil
	if fake.getScheduleReturnsOnCall == nil {
		fake.getScheduleReturnsOnCall = make(map[int]struct {
			result1 *schedule.GetScheduleResponse
			result2 error
		})
	}
	fake.getScheduleReturnsOnCall[i] = struct {
		result1 *schedule.GetScheduleResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getScheduleMutex.RLock()
	defer fake.getScheduleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.API = new(FakeAPI)
