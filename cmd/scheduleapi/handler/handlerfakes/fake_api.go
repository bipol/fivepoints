// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	context "context"
	sync "sync"

	schedule "github.com/smartatransit/fivepoints/api/v1/schedule"
	handler "github.com/smartatransit/fivepoints/cmd/scheduleapi/handler"
)

type FakeAPI struct {
	GetArrivalEstimatesStub        func(context.Context, *schedule.GetArrivalEstimatesRequest) (*schedule.GetArrivalEstimatesResponse, error)
	getArrivalEstimatesMutex       sync.RWMutex
	getArrivalEstimatesArgsForCall []struct {
		arg1 context.Context
		arg2 *schedule.GetArrivalEstimatesRequest
	}
	getArrivalEstimatesReturns struct {
		result1 *schedule.GetArrivalEstimatesResponse
		result2 error
	}
	getArrivalEstimatesReturnsOnCall map[int]struct {
		result1 *schedule.GetArrivalEstimatesResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetArrivalEstimates(arg1 context.Context, arg2 *schedule.GetArrivalEstimatesRequest) (*schedule.GetArrivalEstimatesResponse, error) {
	fake.getArrivalEstimatesMutex.Lock()
	ret, specificReturn := fake.getArrivalEstimatesReturnsOnCall[len(fake.getArrivalEstimatesArgsForCall)]
	fake.getArrivalEstimatesArgsForCall = append(fake.getArrivalEstimatesArgsForCall, struct {
		arg1 context.Context
		arg2 *schedule.GetArrivalEstimatesRequest
	}{arg1, arg2})
	fake.recordInvocation("GetArrivalEstimates", []interface{}{arg1, arg2})
	fake.getArrivalEstimatesMutex.Unlock()
	if fake.GetArrivalEstimatesStub != nil {
		return fake.GetArrivalEstimatesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getArrivalEstimatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetArrivalEstimatesCallCount() int {
	fake.getArrivalEstimatesMutex.RLock()
	defer fake.getArrivalEstimatesMutex.RUnlock()
	return len(fake.getArrivalEstimatesArgsForCall)
}

func (fake *FakeAPI) GetArrivalEstimatesCalls(stub func(context.Context, *schedule.GetArrivalEstimatesRequest) (*schedule.GetArrivalEstimatesResponse, error)) {
	fake.getArrivalEstimatesMutex.Lock()
	defer fake.getArrivalEstimatesMutex.Unlock()
	fake.GetArrivalEstimatesStub = stub
}

func (fake *FakeAPI) GetArrivalEstimatesArgsForCall(i int) (context.Context, *schedule.GetArrivalEstimatesRequest) {
	fake.getArrivalEstimatesMutex.RLock()
	defer fake.getArrivalEstimatesMutex.RUnlock()
	argsForCall := fake.getArrivalEstimatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) GetArrivalEstimatesReturns(result1 *schedule.GetArrivalEstimatesResponse, result2 error) {
	fake.getArrivalEstimatesMutex.Lock()
	defer fake.getArrivalEstimatesMutex.Unlock()
	fake.GetArrivalEstimatesStub = nil
	fake.getArrivalEstimatesReturns = struct {
		result1 *schedule.GetArrivalEstimatesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetArrivalEstimatesReturnsOnCall(i int, result1 *schedule.GetArrivalEstimatesResponse, result2 error) {
	fake.getArrivalEstimatesMutex.Lock()
	defer fake.getArrivalEstimatesMutex.Unlock()
	fake.GetArrivalEstimatesStub = nil
	if fake.getArrivalEstimatesReturnsOnCall == nil {
		fake.getArrivalEstimatesReturnsOnCall = make(map[int]struct {
			result1 *schedule.GetArrivalEstimatesResponse
			result2 error
		})
	}
	fake.getArrivalEstimatesReturnsOnCall[i] = struct {
		result1 *schedule.GetArrivalEstimatesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getArrivalEstimatesMutex.RLock()
	defer fake.getArrivalEstimatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.API = new(FakeAPI)
