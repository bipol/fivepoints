// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/smartatransit/fivepoints/cmd/scheduleapi/handler"
)

type FakeDynamoQuerier struct {
	QueryPagesWithContextStub        func(context.Context, *dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool, ...request.Option) error
	queryPagesWithContextMutex       sync.RWMutex
	queryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *dynamodb.QueryInput
		arg3 func(*dynamodb.QueryOutput, bool) bool
		arg4 []request.Option
	}
	queryPagesWithContextReturns struct {
		result1 error
	}
	queryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	QueryWithContextStub        func(context.Context, *dynamodb.QueryInput, ...request.Option) (*dynamodb.QueryOutput, error)
	queryWithContextMutex       sync.RWMutex
	queryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *dynamodb.QueryInput
		arg3 []request.Option
	}
	queryWithContextReturns struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}
	queryWithContextReturnsOnCall map[int]struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDynamoQuerier) QueryPagesWithContext(arg1 context.Context, arg2 *dynamodb.QueryInput, arg3 func(*dynamodb.QueryOutput, bool) bool, arg4 ...request.Option) error {
	fake.queryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.queryPagesWithContextReturnsOnCall[len(fake.queryPagesWithContextArgsForCall)]
	fake.queryPagesWithContextArgsForCall = append(fake.queryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *dynamodb.QueryInput
		arg3 func(*dynamodb.QueryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("QueryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.queryPagesWithContextMutex.Unlock()
	if fake.QueryPagesWithContextStub != nil {
		return fake.QueryPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.queryPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeDynamoQuerier) QueryPagesWithContextCallCount() int {
	fake.queryPagesWithContextMutex.RLock()
	defer fake.queryPagesWithContextMutex.RUnlock()
	return len(fake.queryPagesWithContextArgsForCall)
}

func (fake *FakeDynamoQuerier) QueryPagesWithContextCalls(stub func(context.Context, *dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool, ...request.Option) error) {
	fake.queryPagesWithContextMutex.Lock()
	defer fake.queryPagesWithContextMutex.Unlock()
	fake.QueryPagesWithContextStub = stub
}

func (fake *FakeDynamoQuerier) QueryPagesWithContextArgsForCall(i int) (context.Context, *dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool, []request.Option) {
	fake.queryPagesWithContextMutex.RLock()
	defer fake.queryPagesWithContextMutex.RUnlock()
	argsForCall := fake.queryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDynamoQuerier) QueryPagesWithContextReturns(result1 error) {
	fake.queryPagesWithContextMutex.Lock()
	defer fake.queryPagesWithContextMutex.Unlock()
	fake.QueryPagesWithContextStub = nil
	fake.queryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDynamoQuerier) QueryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.queryPagesWithContextMutex.Lock()
	defer fake.queryPagesWithContextMutex.Unlock()
	fake.QueryPagesWithContextStub = nil
	if fake.queryPagesWithContextReturnsOnCall == nil {
		fake.queryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.queryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDynamoQuerier) QueryWithContext(arg1 context.Context, arg2 *dynamodb.QueryInput, arg3 ...request.Option) (*dynamodb.QueryOutput, error) {
	fake.queryWithContextMutex.Lock()
	ret, specificReturn := fake.queryWithContextReturnsOnCall[len(fake.queryWithContextArgsForCall)]
	fake.queryWithContextArgsForCall = append(fake.queryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *dynamodb.QueryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("QueryWithContext", []interface{}{arg1, arg2, arg3})
	fake.queryWithContextMutex.Unlock()
	if fake.QueryWithContextStub != nil {
		return fake.QueryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDynamoQuerier) QueryWithContextCallCount() int {
	fake.queryWithContextMutex.RLock()
	defer fake.queryWithContextMutex.RUnlock()
	return len(fake.queryWithContextArgsForCall)
}

func (fake *FakeDynamoQuerier) QueryWithContextCalls(stub func(context.Context, *dynamodb.QueryInput, ...request.Option) (*dynamodb.QueryOutput, error)) {
	fake.queryWithContextMutex.Lock()
	defer fake.queryWithContextMutex.Unlock()
	fake.QueryWithContextStub = stub
}

func (fake *FakeDynamoQuerier) QueryWithContextArgsForCall(i int) (context.Context, *dynamodb.QueryInput, []request.Option) {
	fake.queryWithContextMutex.RLock()
	defer fake.queryWithContextMutex.RUnlock()
	argsForCall := fake.queryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDynamoQuerier) QueryWithContextReturns(result1 *dynamodb.QueryOutput, result2 error) {
	fake.queryWithContextMutex.Lock()
	defer fake.queryWithContextMutex.Unlock()
	fake.QueryWithContextStub = nil
	fake.queryWithContextReturns = struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoQuerier) QueryWithContextReturnsOnCall(i int, result1 *dynamodb.QueryOutput, result2 error) {
	fake.queryWithContextMutex.Lock()
	defer fake.queryWithContextMutex.Unlock()
	fake.QueryWithContextStub = nil
	if fake.queryWithContextReturnsOnCall == nil {
		fake.queryWithContextReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.QueryOutput
			result2 error
		})
	}
	fake.queryWithContextReturnsOnCall[i] = struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoQuerier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryPagesWithContextMutex.RLock()
	defer fake.queryPagesWithContextMutex.RUnlock()
	fake.queryWithContextMutex.RLock()
	defer fake.queryWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDynamoQuerier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.DynamoQuerier = new(FakeDynamoQuerier)
